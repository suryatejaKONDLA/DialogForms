@page "/"
@inject IModalService ModalService
@inject CustomerService CustomerDataService
@implements IDisposable
<PageTitle>Home</PageTitle>


<div class="col-12">
    <div class="row">
        <div class="col-3">
            <h3>Modal Demo</h3>
            <button class="btn btn-primary"
                    @onclick="AddCustomer">
                Add Customer
            </button>
        </div>
        <div class="col-9">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th>City</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in Customers)
                    {
                        <tr>
                            <td>@customer.FirstName</td>
                            <td>@customer.LastName</td>
                            <td>@customer.Email</td>
                            <td>@customer.PhoneNumber</td>
                            <td>@customer.City</td>
                            <td>
                                <button class="btn btn-primary btn-sm"
                                        @onclick="() => OnUpdateClick(customer)">
                                    Update
                                </button>
                                <button class="btn btn-danger btn-sm"
                                        @onclick="() => OnDeleteClick(customer)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<CustomerModel> Customers = new();

    protected override void OnInitialized()
    {
        Customers = CustomerDataService.GetCustomers();
        CustomerDataService.OnChange += StateHasChanged;
    }

    private async Task AddCustomer()
    {
        await ModalService.ShowAsync(new()
            {
                Title = "Customer",
                ChildComponent = typeof(Customer),
                Parameters = new()
            {
                { "ButtonType", ButtonTypes.OkCancel },
                { "ActionType", ActionType.Add },
                },
                ActionType = ActionType.Add,
                ModalSize = ModalSize.ExtraLarge,
                ShowBody = true
            });
    }

    private async Task OnUpdateClick(CustomerModel customer)
    {
        await ModalService.ShowAsync(new()
            {
                Title = "Customer",
                ChildComponent = typeof(Customer),
                Parameters = new()
            {
                { "ButtonType", ButtonTypes.OkCancel },
                { "Context", customer },
                { "ActionType", ActionType.Update }
            },
                ActionType = ActionType.Update,
                ModalSize = ModalSize.ExtraLarge,
                ShowBody = true
            });
    }

    private async Task OnDeleteClick(CustomerModel customer)
    {
        var result = await ModalService.ShowConfirmationAsync("Confirmation", "Are you sure you want to delete this item?");
        if (result)
        {
            CustomerDataService.DeleteCustomer(customer.Id);
        }
    }

    public void Dispose() { CustomerDataService.OnChange -= StateHasChanged; }

}